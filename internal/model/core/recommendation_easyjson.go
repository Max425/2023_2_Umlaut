// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package core

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5c54f0e1DecodeGithubComGoParkMailRu20232UmlautInternalModelCore(in *jlexer.Lexer, out *RecommendationStatistic) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "avg-recommend":
			out.AvgRecommend = float32(in.Float32())
		case "nps":
			out.NPS = float32(in.Float32())
		case "recommend-count":
			if in.IsNull() {
				in.Skip()
				out.RecommendCount = nil
			} else {
				in.Delim('[')
				if out.RecommendCount == nil {
					if !in.IsDelim(']') {
						out.RecommendCount = make([]int32, 0, 16)
					} else {
						out.RecommendCount = []int32{}
					}
				} else {
					out.RecommendCount = (out.RecommendCount)[:0]
				}
				for !in.IsDelim(']') {
					var v1 int32
					v1 = int32(in.Int32())
					out.RecommendCount = append(out.RecommendCount, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5c54f0e1EncodeGithubComGoParkMailRu20232UmlautInternalModelCore(out *jwriter.Writer, in RecommendationStatistic) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"avg-recommend\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.AvgRecommend))
	}
	{
		const prefix string = ",\"nps\":"
		out.RawString(prefix)
		out.Float32(float32(in.NPS))
	}
	{
		const prefix string = ",\"recommend-count\":"
		out.RawString(prefix)
		if in.RecommendCount == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.RecommendCount {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.Int32(int32(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RecommendationStatistic) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5c54f0e1EncodeGithubComGoParkMailRu20232UmlautInternalModelCore(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RecommendationStatistic) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5c54f0e1EncodeGithubComGoParkMailRu20232UmlautInternalModelCore(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RecommendationStatistic) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5c54f0e1DecodeGithubComGoParkMailRu20232UmlautInternalModelCore(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RecommendationStatistic) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5c54f0e1DecodeGithubComGoParkMailRu20232UmlautInternalModelCore(l, v)
}
func easyjson5c54f0e1DecodeGithubComGoParkMailRu20232UmlautInternalModelCore1(in *jlexer.Lexer, out *Recommendation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "user_id":
			out.UserId = int(in.Int())
		case "rating":
			if in.IsNull() {
				in.Skip()
				out.Rating = nil
			} else {
				if out.Rating == nil {
					out.Rating = new(int)
				}
				*out.Rating = int(in.Int())
			}
		case "created_at":
			if in.IsNull() {
				in.Skip()
				out.CreatedAt = nil
			} else {
				if out.CreatedAt == nil {
					out.CreatedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5c54f0e1EncodeGithubComGoParkMailRu20232UmlautInternalModelCore1(out *jwriter.Writer, in Recommendation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int(int(in.UserId))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		if in.Rating == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.Rating))
		}
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		if in.CreatedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.CreatedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Recommendation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5c54f0e1EncodeGithubComGoParkMailRu20232UmlautInternalModelCore1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Recommendation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5c54f0e1EncodeGithubComGoParkMailRu20232UmlautInternalModelCore1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Recommendation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5c54f0e1DecodeGithubComGoParkMailRu20232UmlautInternalModelCore1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Recommendation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5c54f0e1DecodeGithubComGoParkMailRu20232UmlautInternalModelCore1(l, v)
}
