// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/microservices/admin/proto/admin_grpc.pb.go

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	reflect "reflect"

	proto "github.com/go-park-mail-ru/2023_2_Umlaut/pkg/microservices/admin/proto"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockAdminClient is a mock of AdminClient interface.
type MockAdminClient struct {
	ctrl     *gomock.Controller
	recorder *MockAdminClientMockRecorder
}

// MockAdminClientMockRecorder is the mock recorder for MockAdminClient.
type MockAdminClientMockRecorder struct {
	mock *MockAdminClient
}

// NewMockAdminClient creates a new mock instance.
func NewMockAdminClient(ctrl *gomock.Controller) *MockAdminClient {
	mock := &MockAdminClient{ctrl: ctrl}
	mock.recorder = &MockAdminClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminClient) EXPECT() *MockAdminClientMockRecorder {
	return m.recorder
}

// AcceptComplaint mocks base method.
func (m *MockAdminClient) AcceptComplaint(ctx context.Context, in *proto.Complaint, opts ...grpc.CallOption) (*proto.AdminEmpty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AcceptComplaint", varargs...)
	ret0, _ := ret[0].(*proto.AdminEmpty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptComplaint indicates an expected call of AcceptComplaint.
func (mr *MockAdminClientMockRecorder) AcceptComplaint(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptComplaint", reflect.TypeOf((*MockAdminClient)(nil).AcceptComplaint), varargs...)
}

// CreateFeedFeedback mocks base method.
func (m *MockAdminClient) CreateFeedFeedback(ctx context.Context, in *proto.Recommendation, opts ...grpc.CallOption) (*proto.AdminEmpty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFeedFeedback", varargs...)
	ret0, _ := ret[0].(*proto.AdminEmpty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFeedFeedback indicates an expected call of CreateFeedFeedback.
func (mr *MockAdminClientMockRecorder) CreateFeedFeedback(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFeedFeedback", reflect.TypeOf((*MockAdminClient)(nil).CreateFeedFeedback), varargs...)
}

// CreateFeedback mocks base method.
func (m *MockAdminClient) CreateFeedback(ctx context.Context, in *proto.Feedback, opts ...grpc.CallOption) (*proto.AdminEmpty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFeedback", varargs...)
	ret0, _ := ret[0].(*proto.AdminEmpty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFeedback indicates an expected call of CreateFeedback.
func (mr *MockAdminClientMockRecorder) CreateFeedback(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFeedback", reflect.TypeOf((*MockAdminClient)(nil).CreateFeedback), varargs...)
}

// CreateRecommendation mocks base method.
func (m *MockAdminClient) CreateRecommendation(ctx context.Context, in *proto.Recommendation, opts ...grpc.CallOption) (*proto.AdminEmpty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRecommendation", varargs...)
	ret0, _ := ret[0].(*proto.AdminEmpty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecommendation indicates an expected call of CreateRecommendation.
func (mr *MockAdminClientMockRecorder) CreateRecommendation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecommendation", reflect.TypeOf((*MockAdminClient)(nil).CreateRecommendation), varargs...)
}

// DeleteComplaint mocks base method.
func (m *MockAdminClient) DeleteComplaint(ctx context.Context, in *proto.Complaint, opts ...grpc.CallOption) (*proto.AdminEmpty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteComplaint", varargs...)
	ret0, _ := ret[0].(*proto.AdminEmpty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComplaint indicates an expected call of DeleteComplaint.
func (mr *MockAdminClientMockRecorder) DeleteComplaint(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComplaint", reflect.TypeOf((*MockAdminClient)(nil).DeleteComplaint), varargs...)
}

// GetFeedbackStatistic mocks base method.
func (m *MockAdminClient) GetFeedbackStatistic(ctx context.Context, in *proto.AdminEmpty, opts ...grpc.CallOption) (*proto.FeedbackStatistic, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFeedbackStatistic", varargs...)
	ret0, _ := ret[0].(*proto.FeedbackStatistic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedbackStatistic indicates an expected call of GetFeedbackStatistic.
func (mr *MockAdminClientMockRecorder) GetFeedbackStatistic(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedbackStatistic", reflect.TypeOf((*MockAdminClient)(nil).GetFeedbackStatistic), varargs...)
}

// GetNextComplaint mocks base method.
func (m *MockAdminClient) GetNextComplaint(ctx context.Context, in *proto.AdminEmpty, opts ...grpc.CallOption) (*proto.Complaint, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNextComplaint", varargs...)
	ret0, _ := ret[0].(*proto.Complaint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextComplaint indicates an expected call of GetNextComplaint.
func (mr *MockAdminClientMockRecorder) GetNextComplaint(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextComplaint", reflect.TypeOf((*MockAdminClient)(nil).GetNextComplaint), varargs...)
}

// GetRecommendationStatistic mocks base method.
func (m *MockAdminClient) GetRecommendationStatistic(ctx context.Context, in *proto.AdminEmpty, opts ...grpc.CallOption) (*proto.RecommendationStatistic, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRecommendationStatistic", varargs...)
	ret0, _ := ret[0].(*proto.RecommendationStatistic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecommendationStatistic indicates an expected call of GetRecommendationStatistic.
func (mr *MockAdminClientMockRecorder) GetRecommendationStatistic(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendationStatistic", reflect.TypeOf((*MockAdminClient)(nil).GetRecommendationStatistic), varargs...)
}

// MockAdminServer is a mock of AdminServer interface.
type MockAdminServer struct {
	ctrl     *gomock.Controller
	recorder *MockAdminServerMockRecorder
}

// MockAdminServerMockRecorder is the mock recorder for MockAdminServer.
type MockAdminServerMockRecorder struct {
	mock *MockAdminServer
}

// NewMockAdminServer creates a new mock instance.
func NewMockAdminServer(ctrl *gomock.Controller) *MockAdminServer {
	mock := &MockAdminServer{ctrl: ctrl}
	mock.recorder = &MockAdminServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminServer) EXPECT() *MockAdminServerMockRecorder {
	return m.recorder
}

// AcceptComplaint mocks base method.
func (m *MockAdminServer) AcceptComplaint(arg0 context.Context, arg1 *proto.Complaint) (*proto.AdminEmpty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptComplaint", arg0, arg1)
	ret0, _ := ret[0].(*proto.AdminEmpty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptComplaint indicates an expected call of AcceptComplaint.
func (mr *MockAdminServerMockRecorder) AcceptComplaint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptComplaint", reflect.TypeOf((*MockAdminServer)(nil).AcceptComplaint), arg0, arg1)
}

// CreateFeedFeedback mocks base method.
func (m *MockAdminServer) CreateFeedFeedback(arg0 context.Context, arg1 *proto.Recommendation) (*proto.AdminEmpty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFeedFeedback", arg0, arg1)
	ret0, _ := ret[0].(*proto.AdminEmpty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFeedFeedback indicates an expected call of CreateFeedFeedback.
func (mr *MockAdminServerMockRecorder) CreateFeedFeedback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFeedFeedback", reflect.TypeOf((*MockAdminServer)(nil).CreateFeedFeedback), arg0, arg1)
}

// CreateFeedback mocks base method.
func (m *MockAdminServer) CreateFeedback(arg0 context.Context, arg1 *proto.Feedback) (*proto.AdminEmpty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFeedback", arg0, arg1)
	ret0, _ := ret[0].(*proto.AdminEmpty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFeedback indicates an expected call of CreateFeedback.
func (mr *MockAdminServerMockRecorder) CreateFeedback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFeedback", reflect.TypeOf((*MockAdminServer)(nil).CreateFeedback), arg0, arg1)
}

// CreateRecommendation mocks base method.
func (m *MockAdminServer) CreateRecommendation(arg0 context.Context, arg1 *proto.Recommendation) (*proto.AdminEmpty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecommendation", arg0, arg1)
	ret0, _ := ret[0].(*proto.AdminEmpty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecommendation indicates an expected call of CreateRecommendation.
func (mr *MockAdminServerMockRecorder) CreateRecommendation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecommendation", reflect.TypeOf((*MockAdminServer)(nil).CreateRecommendation), arg0, arg1)
}

// DeleteComplaint mocks base method.
func (m *MockAdminServer) DeleteComplaint(arg0 context.Context, arg1 *proto.Complaint) (*proto.AdminEmpty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComplaint", arg0, arg1)
	ret0, _ := ret[0].(*proto.AdminEmpty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComplaint indicates an expected call of DeleteComplaint.
func (mr *MockAdminServerMockRecorder) DeleteComplaint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComplaint", reflect.TypeOf((*MockAdminServer)(nil).DeleteComplaint), arg0, arg1)
}

// GetFeedbackStatistic mocks base method.
func (m *MockAdminServer) GetFeedbackStatistic(arg0 context.Context, arg1 *proto.AdminEmpty) (*proto.FeedbackStatistic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedbackStatistic", arg0, arg1)
	ret0, _ := ret[0].(*proto.FeedbackStatistic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedbackStatistic indicates an expected call of GetFeedbackStatistic.
func (mr *MockAdminServerMockRecorder) GetFeedbackStatistic(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedbackStatistic", reflect.TypeOf((*MockAdminServer)(nil).GetFeedbackStatistic), arg0, arg1)
}

// GetNextComplaint mocks base method.
func (m *MockAdminServer) GetNextComplaint(arg0 context.Context, arg1 *proto.AdminEmpty) (*proto.Complaint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextComplaint", arg0, arg1)
	ret0, _ := ret[0].(*proto.Complaint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextComplaint indicates an expected call of GetNextComplaint.
func (mr *MockAdminServerMockRecorder) GetNextComplaint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextComplaint", reflect.TypeOf((*MockAdminServer)(nil).GetNextComplaint), arg0, arg1)
}

// GetRecommendationStatistic mocks base method.
func (m *MockAdminServer) GetRecommendationStatistic(arg0 context.Context, arg1 *proto.AdminEmpty) (*proto.RecommendationStatistic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecommendationStatistic", arg0, arg1)
	ret0, _ := ret[0].(*proto.RecommendationStatistic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecommendationStatistic indicates an expected call of GetRecommendationStatistic.
func (mr *MockAdminServerMockRecorder) GetRecommendationStatistic(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendationStatistic", reflect.TypeOf((*MockAdminServer)(nil).GetRecommendationStatistic), arg0, arg1)
}

// mustEmbedUnimplementedAdminServer mocks base method.
func (m *MockAdminServer) mustEmbedUnimplementedAdminServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAdminServer")
}

// mustEmbedUnimplementedAdminServer indicates an expected call of mustEmbedUnimplementedAdminServer.
func (mr *MockAdminServerMockRecorder) mustEmbedUnimplementedAdminServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAdminServer", reflect.TypeOf((*MockAdminServer)(nil).mustEmbedUnimplementedAdminServer))
}

// MockUnsafeAdminServer is a mock of UnsafeAdminServer interface.
type MockUnsafeAdminServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAdminServerMockRecorder
}

// MockUnsafeAdminServerMockRecorder is the mock recorder for MockUnsafeAdminServer.
type MockUnsafeAdminServerMockRecorder struct {
	mock *MockUnsafeAdminServer
}

// NewMockUnsafeAdminServer creates a new mock instance.
func NewMockUnsafeAdminServer(ctrl *gomock.Controller) *MockUnsafeAdminServer {
	mock := &MockUnsafeAdminServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAdminServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAdminServer) EXPECT() *MockUnsafeAdminServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAdminServer mocks base method.
func (m *MockUnsafeAdminServer) mustEmbedUnimplementedAdminServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAdminServer")
}

// mustEmbedUnimplementedAdminServer indicates an expected call of mustEmbedUnimplementedAdminServer.
func (mr *MockUnsafeAdminServerMockRecorder) mustEmbedUnimplementedAdminServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAdminServer", reflect.TypeOf((*MockUnsafeAdminServer)(nil).mustEmbedUnimplementedAdminServer))
}
