// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/microservices/feed/proto/feed_grpc.pb.go

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	reflect "reflect"

	proto "github.com/go-park-mail-ru/2023_2_Umlaut/pkg/microservices/feed/proto"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockFeedClient is a mock of FeedClient interface.
type MockFeedClient struct {
	ctrl     *gomock.Controller
	recorder *MockFeedClientMockRecorder
}

// MockFeedClientMockRecorder is the mock recorder for MockFeedClient.
type MockFeedClientMockRecorder struct {
	mock *MockFeedClient
}

// NewMockFeedClient creates a new mock instance.
func NewMockFeedClient(ctrl *gomock.Controller) *MockFeedClient {
	mock := &MockFeedClient{ctrl: ctrl}
	mock.recorder = &MockFeedClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeedClient) EXPECT() *MockFeedClientMockRecorder {
	return m.recorder
}

// Feed mocks base method.
func (m *MockFeedClient) Feed(ctx context.Context, in *proto.FilterParams, opts ...grpc.CallOption) (*proto.FeedData, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Feed", varargs...)
	ret0, _ := ret[0].(*proto.FeedData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Feed indicates an expected call of Feed.
func (mr *MockFeedClientMockRecorder) Feed(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Feed", reflect.TypeOf((*MockFeedClient)(nil).Feed), varargs...)
}

// MockFeedServer is a mock of FeedServer interface.
type MockFeedServer struct {
	ctrl     *gomock.Controller
	recorder *MockFeedServerMockRecorder
}

// MockFeedServerMockRecorder is the mock recorder for MockFeedServer.
type MockFeedServerMockRecorder struct {
	mock *MockFeedServer
}

// NewMockFeedServer creates a new mock instance.
func NewMockFeedServer(ctrl *gomock.Controller) *MockFeedServer {
	mock := &MockFeedServer{ctrl: ctrl}
	mock.recorder = &MockFeedServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeedServer) EXPECT() *MockFeedServerMockRecorder {
	return m.recorder
}

// Feed mocks base method.
func (m *MockFeedServer) Feed(arg0 context.Context, arg1 *proto.FilterParams) (*proto.FeedData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Feed", arg0, arg1)
	ret0, _ := ret[0].(*proto.FeedData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Feed indicates an expected call of Feed.
func (mr *MockFeedServerMockRecorder) Feed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Feed", reflect.TypeOf((*MockFeedServer)(nil).Feed), arg0, arg1)
}

// mustEmbedUnimplementedFeedServer mocks base method.
func (m *MockFeedServer) mustEmbedUnimplementedFeedServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFeedServer")
}

// mustEmbedUnimplementedFeedServer indicates an expected call of mustEmbedUnimplementedFeedServer.
func (mr *MockFeedServerMockRecorder) mustEmbedUnimplementedFeedServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFeedServer", reflect.TypeOf((*MockFeedServer)(nil).mustEmbedUnimplementedFeedServer))
}

// MockUnsafeFeedServer is a mock of UnsafeFeedServer interface.
type MockUnsafeFeedServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeFeedServerMockRecorder
}

// MockUnsafeFeedServerMockRecorder is the mock recorder for MockUnsafeFeedServer.
type MockUnsafeFeedServerMockRecorder struct {
	mock *MockUnsafeFeedServer
}

// NewMockUnsafeFeedServer creates a new mock instance.
func NewMockUnsafeFeedServer(ctrl *gomock.Controller) *MockUnsafeFeedServer {
	mock := &MockUnsafeFeedServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeFeedServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeFeedServer) EXPECT() *MockUnsafeFeedServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedFeedServer mocks base method.
func (m *MockUnsafeFeedServer) mustEmbedUnimplementedFeedServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFeedServer")
}

// mustEmbedUnimplementedFeedServer indicates an expected call of mustEmbedUnimplementedFeedServer.
func (mr *MockUnsafeFeedServerMockRecorder) mustEmbedUnimplementedFeedServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFeedServer", reflect.TypeOf((*MockUnsafeFeedServer)(nil).mustEmbedUnimplementedFeedServer))
}
